{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\josep\\\\dev\\\\wedding-ui\\\\pages\\\\invitation.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from '../components/MyLayout';\nimport Table from '../components/Table';\nimport TableStyle from '../components/TableStyle';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\nvar Invitation =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Invitation, _React$Component);\n\n  function Invitation(props) {\n    _classCallCheck(this, Invitation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Invitation).call(this, props));\n  }\n\n  _createClass(Invitation, [{\n    key: \"render\",\n    value: function render() {\n      var invitation = this.props.invitation;\n      var guests = [];\n\n      if (invitation) {\n        for (var i = 0; i < invitation.guests.length; i++) {\n          var guestElem = invitation.guests[i];\n          guests.push({\n            invitationId: invitation.invitation_id,\n            guestId: guestElem.guest_id,\n            guest: guestElem.guest_name,\n            attending: guestElem.attending,\n            meal: guestElem.meal\n          });\n        }\n      }\n\n      if (!invitation) {\n        return __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"'loading...'\");\n      } else {\n        console.log(\"got invitation: \".concat(invitation.guests[0].attending));\n      }\n\n      function updateInvitation(invitationUpdate) {\n        console.log(\"received invitation update: \".concat(_JSON$stringify(invitationUpdate)));\n        fetch('http://localhost:8080/invitations', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: _JSON$stringify(requestBody)\n        }).then(function (response) {\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n\n          return response;\n        })[\"catch\"](function (error) {\n          console.error('Error:', error);\n        });\n      }\n\n      function onAfterSaveCell(row, cellName, cellValue) {\n        alert(\"Save cell \".concat(cellName, \" with value \").concat(cellValue));\n        var rowStr = '';\n\n        for (var prop in row) {\n          rowStr += prop + ': ' + row[prop] + '\\n';\n        }\n\n        alert('The whole row :\\n' + rowStr);\n        var meal = row['meal'];\n        var attending = row['attending'];\n        var invitationId = row['invitationId'];\n        var guestId = row['guestId']; // update will be on each cell, so we only need to worry about one guest being updated at a time (since each guest is a row in the table)\n\n        var invitationUpdate = {\n          invitation_id: invitationId,\n          rsvped: true,\n          guests: [{\n            guest_id: guestId,\n            attending: attending,\n            meal: meal\n          }]\n        };\n        console.log(\"invitation update: \".concat(_JSON$stringify(invitationUpdate)));\n        updateInvitation(invitationUpdate);\n      }\n\n      function onBeforeSaveCell(row, cellName, cellValue) {\n        // You can do any validation on here for editing value,\n        // return false for reject the editing\n        if (cellName == 'meal') {\n          if (cellValue != 'BURGER' && cellValue != 'CHICKEN') {\n            console.log(\"trying to change to invalid meal: \".concat(cellValue));\n            return false;\n          }\n        } else if (cellName == 'attending') {\n          if (cellValue != 'true' && cellValue != 'false') {\n            console.log(\"trying to change to invalid attending: \".concat(cellValue));\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      var cellEditProp = {\n        mode: 'click',\n        blurToSave: true,\n        beforeSaveCell: onBeforeSaveCell,\n        // a hook for before saving cell\n        afterSaveCell: onAfterSaveCell // a hook for after saving cell\n\n      };\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, __jsx(BootstrapTable, {\n        data: guests,\n        cellEdit: cellEditProp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, __jsx(TableHeaderColumn, {\n        dataField: \"guest\",\n        isKey: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Guest\"), __jsx(TableHeaderColumn, {\n        dataField: \"attending\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Attending\"), __jsx(TableHeaderColumn, {\n        dataField: \"meal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Meal\")));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(ctx) {\n      var invitationId, myUrl, response, data;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              invitationId = ctx.query.invitationId;\n              console.log(\"invitation id: \".concat(invitationId));\n              myUrl = 'http://localhost:8080/invitations/' + invitationId;\n              console.log(\"url: \".concat(myUrl));\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fetch(myUrl));\n\n            case 6:\n              response = _context.sent;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              data = _context.sent;\n              return _context.abrupt(\"return\", {\n                invitation: data\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return Invitation;\n}(React.Component);\n\nexport default Invitation;","map":{"version":3,"sources":["C:/Users/josep/dev/wedding-ui/pages/invitation.js"],"names":["React","Layout","Table","TableStyle","Link","fetch","Dropdown","BootstrapTable","TableHeaderColumn","Invitation","props","invitation","guests","i","length","guestElem","push","invitationId","invitation_id","guestId","guest_id","guest","guest_name","attending","meal","console","log","updateInvitation","invitationUpdate","method","headers","body","requestBody","then","response","ok","Error","statusText","error","onAfterSaveCell","row","cellName","cellValue","alert","rowStr","prop","rsvped","onBeforeSaveCell","cellEditProp","mode","blurToSave","beforeSaveCell","afterSaveCell","ctx","query","myUrl","json","data","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Layout from '../components/MyLayout';\r\nimport Table from '../components/Table';\r\nimport TableStyle from '../components/TableStyle';\r\nimport Link from 'next/link';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\r\n\r\nclass Invitation extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  static async getInitialProps(ctx) {\r\n    const invitationId = ctx.query.invitationId\r\n    console.log(`invitation id: ${invitationId}`)\r\n    const myUrl = 'http://localhost:8080/invitations/' + invitationId\r\n    console.log(`url: ${myUrl}`)\r\n    const response = await fetch(myUrl)\r\n    const data = await response.json();\r\n\r\n    return {\r\n      invitation: data\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const invitation = this.props.invitation\r\n    const guests = []\r\n    if (invitation) {\r\n      for (var i = 0; i < invitation.guests.length; i++) {\r\n        let guestElem = invitation.guests[i]\r\n        guests.push({\r\n          invitationId: invitation.invitation_id,\r\n          guestId: guestElem.guest_id,\r\n          guest: guestElem.guest_name,\r\n          attending: guestElem.attending,\r\n          meal: guestElem.meal\r\n        })\r\n      }\r\n    }\r\n    if (!invitation) {\r\n      return (\r\n        <div>'loading...'</div>\r\n      );\r\n    } else {\r\n      console.log(`got invitation: ${invitation.guests[0].attending}`)\r\n    }\r\n\r\n    function updateInvitation(invitationUpdate) {\r\n      console.log(`received invitation update: ${JSON.stringify(invitationUpdate)}`)\r\n      fetch('http://localhost:8080/invitations', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(requestBody)\r\n      })\r\n      .then(function(response) {\r\n        if (!response.ok) {\r\n          throw Error(response.statusText);\r\n        }\r\n        return response;\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n    }\r\n\r\n    function onAfterSaveCell(row, cellName, cellValue) {\r\n      alert(`Save cell ${cellName} with value ${cellValue}`);\r\n\r\n      let rowStr = '';\r\n      for (const prop in row) {\r\n        rowStr += prop + ': ' + row[prop] + '\\n';\r\n      }\r\n\r\n      alert('The whole row :\\n' + rowStr);\r\n      const meal = row['meal']\r\n      const attending = row['attending']\r\n      const invitationId = row['invitationId']\r\n      const guestId = row['guestId']\r\n\r\n      // update will be on each cell, so we only need to worry about one guest being updated at a time (since each guest is a row in the table)\r\n      let invitationUpdate = {\r\n        invitation_id: invitationId,\r\n        rsvped: true,\r\n        guests: [\r\n          {\r\n            guest_id: guestId,\r\n            attending: attending,\r\n            meal: meal\r\n          }\r\n        ]\r\n      }\r\n      console.log(`invitation update: ${JSON.stringify(invitationUpdate)}`)\r\n      updateInvitation(invitationUpdate)\r\n    }\r\n\r\n    function onBeforeSaveCell(row, cellName, cellValue) {\r\n      // You can do any validation on here for editing value,\r\n      // return false for reject the editing\r\n      if (cellName == 'meal') {\r\n        if (cellValue != 'BURGER' && cellValue != 'CHICKEN') {\r\n          console.log(`trying to change to invalid meal: ${cellValue}`)\r\n          return false\r\n        }\r\n      } else if (cellName == 'attending') {\r\n        if (cellValue != 'true' && cellValue != 'false') {\r\n          console.log(`trying to change to invalid attending: ${cellValue}`)\r\n          return false\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    const cellEditProp = {\r\n      mode: 'click',\r\n      blurToSave: true,\r\n      beforeSaveCell: onBeforeSaveCell, // a hook for before saving cell\r\n      afterSaveCell: onAfterSaveCell  // a hook for after saving cell\r\n    };\r\n\r\n    return (\r\n      <Layout>\r\n        <BootstrapTable data={ guests }  cellEdit={ cellEditProp }>\r\n            <TableHeaderColumn dataField='guest' isKey={ true }>Guest</TableHeaderColumn>\r\n            <TableHeaderColumn dataField='attending'>Attending</TableHeaderColumn>\r\n            <TableHeaderColumn dataField='meal'>Meal</TableHeaderColumn>\r\n        </BootstrapTable>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Invitation;\r\n"]},"metadata":{},"sourceType":"module"}